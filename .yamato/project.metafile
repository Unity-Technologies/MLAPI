# The small agent was created to handle jobs that don't involve running Unity (for example pack job).
# It uses ubuntu since Linux VMs are faster and cheaper to provision than Mac or Windows Virtual Machines (VMs).
# The b1.small flavour is nearly always sufficient for jobs that donâ€™t involve running Unity.
small_agent: 
    - name: ubuntu
      type: Unity::VM
      image: package-ci/ubuntu-22.04:v4
      flavor: b1.small

# Platforms that project will/can be tested on. It would be immensely expensive to test on all possible platforms since subset of those was chosen to show the best overall representation
test_platforms:
    # Default platform is used for all basic jobs. Ubuntu was chosen since it's fastest and most available
    default:
        - name: ubuntu
          type: Unity::VM
          image: package-ci/ubuntu-22.04:v4
          flavor: b1.large
          standalone: StandaloneLinux64
    # Desktop platforms cover all main desktop platforms
    # Windows_arm64 is recommended to use only after builds and when it comes to macOS_arm64 there is problem with OpenCL not being available. Other option would be to separate build and run phases but disabled for now
    desktop:  
        - name: ubuntu
          type: Unity::VM
          image: package-ci/ubuntu-22.04:v4
          flavor: b1.large
          standalone: StandaloneLinux64
          model: rtx2080
        - name: win
          type: Unity::VM
          image: package-ci/win10:v4
          flavor: b1.large
          standalone: StandaloneWindows64
          model: rtx2080
        - name: mac
          type: Unity::VM::osx
          image: package-ci/macos-13:v4
          flavor: m1.mac
          standalone: StandaloneOSX
    # Mobile platforms cover all main mobile devices. There is a split between the build and run phase so there is a need of splitting specification for both (since its different)
    mobile_build:
        - name: android-armV7
          type: Unity::VM
          image: package-ci/win10:v4
          flavor: b1.large
          standalone: Android
          base: win
          architecture: armv7
        - name: android-arm64
          type: Unity::VM
          image: package-ci/win11:v4
          flavor: b1.large
          standalone: Android
          base: win
          architecture: arm64
        # iOS modern builds are ARM64-only, thus no testing with armv7 (as in android case)
        - name: ios-arm64
          type: Unity::VM::osx
          image: package-ci/macos-13-arm64:v4
          flavor: m1.mac
          standalone: IOS
          base: mac
          architecture: arm64
    mobile_test:
        - name: android-armV7
          type: Unity::mobile::shield
          image: package-ci/win10:v4
          flavor: b1.large
          model: ShieldPro
          standalone: Android
          base: ubuntu
          architecture: armv7
        - name: android-arm64
          type: Unity::mobile::shield
          image: package-ci/win11-arm64:v4
          flavor: b1.large
          model: ShieldPro
          standalone: Android
          base: ubuntu
          architecture: arm64
        - name: ios-arm64
          type: Unity::mobile::iPhone
          image: package-ci/macos-13-arm64:v4
          flavor: m1.mac
          model: SE
          standalone: IOS
          base: mac
          architecture: arm64
    console_build:
        - name: ps4
          type: Unity::VM
          image: package-ci/win10-ps4:v4
          flavor: b1.large
          standalone: PS4
        - name: ps5
          type: Unity::VM
          image: package-ci/win10-ps5:v4
          flavor: b1.large
          standalone: PS5
        - name: switch
          type: Unity::VM
          image: package-ci/win10-switch:v4
          flavor: b1.large
          standalone: Switch
        - name: gamecorexboxone
          type: Unity::VM
          image: package-ci/win10-xbox:v4
          flavor: b1.large
          standalone: GameCoreXboxOne
        - name: gamecorescarlett
          type: Unity::VM
          image: package-ci/win10-xbox:v4
          flavor: b1.large
          standalone: XboxSeries
    console_test:
        - name: ps4
          type: Unity::console::ps4
          image: package-ci/win10-ps4:v4
          flavor: b1.large
          model: devkit
          standalone: PS4
        - name: ps5
          type:  Unity::console::ps5
          image: package-ci/win10-ps5:v4
          flavor: b1.large
          model: devkit
          standalone: PS5
        - name: switch
          type: Unity::console::switch
          image: package-ci/win10-switch:v4
          flavor: b1.large
          standalone: Switch
          base: win
        - name: xboxOne
          type: Unity::console::xbox
          image: package-ci/win10-xbox:v4
          flavor: b1.large
          standalone: GameCoreXboxOne
        - name: xboxseries
          type: Unity::console::scarlett
          image: package-ci/win10-xbox:v4
          flavor: b1.large
          standalone: XboxSeries
    
    
# Editors to be used for testing.
# Since NGOv2 official support started from U6 it means that only those editors should be used for testing
validation_editors:
    default:
        - trunk
    all:
        - 6000.0
        - 6000.1 
        - trunk
        
        
# Scripting backends used by Standalone Playmode Tests
scripting_backends: 
  - mono
  - il2cpp


# Projects within the repository that will be tested. Name will be used
# for job ids, so it should not contain spaces/non-supported characters
# The first entry in this array will also
# be used for validation, code coverage etc (windows) so it's important to be careful when changing order of projects!
projects:
    default:
        - name: testproject
          path: testproject
          has_tests: true
    all:
        - name: testproject
          path: testproject
          has_tests: true
        - name: minimalproject
          path: minimalproject
          has_tests: false
        - name: testproject-tools-integration
          path: testproject-tools-integration
          has_tests: true
